// ==================== MAIN SERVER CLASS ====================
package com.serpstat;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.modelcontextprotocol.server.McpServer;
import io.modelcontextprotocol.server.McpSyncServer;
import io.modelcontextprotocol.server.transport.StdioServerTransportProvider;
import io.modelcontextprotocol.spec.McpSchema.ServerCapabilities;

import com.serpstat.core.ToolRegistry;
import com.serpstat.core.SerpstatApiClient;

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Serpstat API
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –º–æ–¥—É–ª—å–Ω–∞—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */
public class SerpstatMcpServer {

    private final String apiToken;
    private McpSyncServer mcpServer;

    public SerpstatMcpServer(String apiToken) {
        this.apiToken = apiToken;
    }

    public static void main(String[] args) {

        String apiToken = System.getenv("SERPSTAT_API_TOKEN");
        if (apiToken == null || apiToken.isEmpty()) {
            System.err.println("Error: Environment variable SERPSTAT_API_TOKEN is not set. Check README.md for instructions.");
            System.exit(1);
        }


        SerpstatMcpServer server = new SerpstatMcpServer(apiToken);

        try {
            server.start();
        } catch (Exception e) {
            System.err.println("Failed to start server: " + e.getMessage());
            System.err.println(e.getStackTrace());
            System.exit(1);
        }
    }

    public void start() throws Exception {
        // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        SerpstatApiClient apiClient = new SerpstatApiClient(apiToken);

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ
        ToolRegistry toolRegistry = new ToolRegistry(apiClient);

        // –°–æ–∑–¥–∞–µ–º STDIO —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        var transportProvider =new StdioServerTransportProvider(new ObjectMapper());

        // –°–æ–∑–¥–∞–µ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        this.mcpServer = McpServer.sync(transportProvider)
                .serverInfo("serpstat-mcp-server", "0.0.1")
                .capabilities(ServerCapabilities.builder()
                        .tools(true)
                        //.resources(false,false)
                        //.prompts(false)
                        .logging()
                        .build())
                .build();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolRegistry.registerAllTools(mcpServer);

        System.err.println("üöÄ Serpstat MCP Server started successfully!");
        System.err.printf("üìä Registered %d tools across %d domains%n",
                toolRegistry.getToolCount(), toolRegistry.getDomainCount());
        System.err.println("‚è≥ Waiting for MCP client connections...");

        // Graceful shutdown
        Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
        Thread.currentThread().join();
    }

    private void shutdown() {
        System.err.println("üõë Shutting down Serpstat MCP Server...");
        try {
            if (mcpServer != null) {
                mcpServer.closeGracefully();
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error during shutdown: " + e.getMessage());
        }
    }
}
